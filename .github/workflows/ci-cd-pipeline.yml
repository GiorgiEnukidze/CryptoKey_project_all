name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  scan-with-trivy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build Docker image for crypto_key
        run: docker build -t myapp-trivy-crypto-key ./crypto_key

      - name: Build Docker image for cryptokey_project2
        run: docker build -t myapp-trivy-cryptokey-project2 ./cryptokey_project2

      - name: Scan Docker image with Trivy (crypto_key)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: myapp-trivy-crypto-key
          format: 'json'
          output: 'trivy-results-crypto_key.json'

      - name: Upload Trivy scan results for crypto_key
        uses: actions/upload-artifact@v3
        with:
          name: trivy-scan-results-crypto_key
          path: trivy-results-crypto_key.json

      - name: Scan Docker image with Trivy (cryptokey_project2)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: myapp-trivy-cryptokey-project2
          format: 'json'
          output: 'trivy-results-cryptokey_project2.json'

      - name: Upload Trivy scan results for cryptokey_project2
        uses: actions/upload-artifact@v3
        with:
          name: trivy-scan-results-cryptokey_project2
          path: trivy-results-cryptokey_project2.json

  scan-with-owasp-zap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: sudo apt-get install -y docker-compose

      - name: Run web application
        run: docker-compose up -d

      - name: Scan with OWASP ZAP
        uses: zaproxy/action-full-scan@v0.6.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: 'http://localhost:8000'
          format: 'html'
          report-path: 'zap-report.html'

      - name: Upload ZAP scan results
        uses: actions/upload-artifact@v3
        with:
          name: zap-scan-results
          path: zap-report.html

  scan-with-sonarqube:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Install SonarScanner
        run: |
          sudo apt-get install -y wget unzip
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
          sudo unzip sonar-scanner-cli-4.7.0.2747-linux.zip -d /opt/
          sudo ln -s /opt/sonar-scanner-4.7.0.2747-linux/bin/sonar-scanner /usr/local/bin/sonar-scanner

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          sonar-scanner \
          -Dsonar.projectKey=your_project_key \
          -Dsonar.sources=. \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN

      - name: Upload SonarQube scan results
        uses: actions/upload-artifact@v3
        with:
          name: sonarqube-scan-results
          path: .scannerwork/
