name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  scan-with-trivy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build Docker image for crypto_key
        run: docker build -t myapp-trivy-crypto-key ./crypto_key

      - name: Build Docker image for cryptokey_project2
        run: docker build -t myapp-trivy-cryptokey-project2 ./cryptokey_project2

      - name: Scan Docker image with Trivy (crypto_key)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: myapp-trivy-crypto-key

      - name: Scan Docker image with Trivy (cryptokey_project2)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: myapp-trivy-cryptokey-project2

  scan-with-clair:
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build Docker image for crypto_key
        run: docker build -t myapp-clair-crypto-key ./crypto_key

      - name: Build Docker image for cryptokey_project2
        run: docker build -t myapp-clair-cryptokey-project2 ./cryptokey_project2

      - name: Start Clair
        run: |
          docker run -d --name clair \
          -v $(pwd)/clair_config/config.yaml:/config/config.yaml \
          -p 6060:6060 -p 6061:6061 \
          quay.io/projectquay/clair:4.7.4

      - name: Wait for Clair to be ready
        run: sleep 60

      - name: Check Clair logs
        run: docker logs clair

      - name: Test Clair connection
        run: curl http://localhost:6060/v1/layers

      - name: Analyze crypto_key image with Clair
        run: |
          curl -X POST -H "Content-Type: application/json" \
          --data '{"image":{"name":"myapp-clair-crypto-key"}}' \
          http://localhost:6060/v1/layers

      - name: Analyze cryptokey_project2 image with Clair
        run: |
          curl -X POST -H "Content-Type: application/json" \
          --data '{"image":{"name":"myapp-clair-cryptokey-project2"}}' \
          http://localhost:6060/v1/layers
      


  scan-with-snyk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Snyk
        uses: snyk/actions/setup@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install Python dependencies for Django
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r cryptokey_project2/requirements.txt

      - name: Debug Python environment
        run: |
          python --version
          pip --version
          pip freeze  # Vérification de l'environnement Python et des paquets installés

      - name: Test for vulnerabilities in Python dependencies
        run: snyk test --file=requirements.txt --package-manager=pip --debug
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        working-directory: ./cryptokey_project2







  scan-with-owasp-zap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: sudo apt-get install docker-compose

      - name: Run web application
        run: docker-compose up -d

      - name: Scan with OWASP ZAP
        uses: zaproxy/action-full-scan@v0.6.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: 'http://localhost:8000'
